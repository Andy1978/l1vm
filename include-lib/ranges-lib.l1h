// ranges library
//
// call: (var var_min var_max :ranges_int call)
//
(ranges_int func)
	(set int64 1 var@ranges_int)
	(set int64 1 min@ranges_int)
	(set int64 1 max@ranges_int)
	(set int64 1 ret@ranges_int 0)
	(set int64 1 f@ranges_int)
	(set int64 1 one@ranges_int 1)
	(max@ranges_int stpopi)
	(min@ranges_int stpopi)
	(var@ranges_int stpopi)
	// check if var inside ranges
	(((var@ranges_int min@ranges_int <) f =) f if)
		(one@ranges_int ret@ranges_int =)
	(endif)
	(((var@ranges_int max@ranges_int >) f =) f if)
		(one@ranges_int ret@ranges_int =)
	(endif)
	(ret@ranges_int stpushi)
(funcend)
//
//
(ranges_double func)
	(set double 1 var@ranges_double)
	(set double 1 min@ranges_double)
	(set double 1 max@ranges_double)
	(set int64 1 ret@ranges_double 0)
	(set int64 1 f@ranges_double)
	(set int64 1 one@ranges_double 1)
	(max@ranges_double stpopd)
	(min@ranges_double stpopd)
	(var@ranges_double stpopd)
	// check if var inside ranges
	(((var@ranges_double min@ranges_double <) f =) f if)
		(one@ranges_double ret@ranges_double =)
	(endif)
	(((var@ranges_double max@ranges_double >) f =) f if)
		(one@ranges_double ret@ranges_double =)
	(endif)
	(ret@ranges_double stpushi)
(funcend)
