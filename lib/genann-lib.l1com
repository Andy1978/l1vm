// genann library demo
// train XOR function and run trained neural network
//
(main func)
    (set int64 1 zero 0)
    (set int64 1 one 1)
    (set int64 1 i 1000)
    (set int64 1 f 0)
    (set int64 1 ret 0)
    (set double 2 input1 0.0 0.0)
    (set double 2 input2 0.0 1.0)
    (set double 2 input3 1.0 0.0)
    (set double 2 input4 1.0 1.0)
    (set double 1 des_output_null 0.0)
    (set double 1 des_output_one 1.0)
    (set double 1 output 1.0)
    (set int64 1 input1_addr 40)
    (set int64 1 input2_addr 56)
    (set int64 1 input3_addr 72)
    (set int64 1 input4_addr 88)
    (set int64 1 des_output_null_addr 104)
    (set int64 1 des_output_one_addr 112)
    (set int64 1 output_addr 120)
    (set int64 1 two 2)
    (set string 16 learning "learning xor...")
    (set string 10 txt_1 "0 xor 0: ")
    (set string 10 txt_2 "0 xor 1: ")
    (set string 10 txt_3 "1 xor 0: ")
    (set string 10 txt_4 "1 xor 1: ")
    (set string 11 run "running..." )
	(set int64 1 handle 0)
    (set int64 1 three 3)
    // init genann library
    (zero one :genann_init_lib call)
	(ret stpopi)
    (loadreg)
	(((ret zero !=) f =) f if)
		(1 zero 0 0 intr0)
		(255 zero 0 0 intr0)
	(endif)
    (two one two one :genann_init call)
    (handle stpopb)
    (loadreg)
    (4 ret 0 0 intr0)
    (7 0 0 0 intr0)
    (6 learningaddr 0 0 intr0)
    (7 0 0 0 intr0)
    (:learn)
    (handle input2_addr des_output_one_addr three :genann_train call)
    (loadreg)
    (handle input3_addr des_output_one_addr three :genann_train call)
    (loadreg)
    (handle input1_addr des_output_null_addr three :genann_train call)
    (loadreg)
    (handle input4_addr des_output_null_addr three :genann_train call)
    (loadreg)
    ((i one -) i =)
    ((i zero >) f =)
    (f :learn jmpi)
    // run ann
    (6 runaddr 0 0 intr0)
    (7 0 0 0 intr0)
    // run genann with one output variable
    (handle input1_addr output_addr one :genann_run call)
    (loadreg)
    (6 txt_1addr 0 0 intr0)
    (5 output 0 0 intr0)
    (7 0 0 0 intr0)
    (handle input2_addr output_addr one :genann_run call)
    (loadreg)
    (6 txt_2addr 0 0 intr0)
    (5 output 0 0 intr0)
    (7 0 0 0 intr0)
    (handle input3_addr output_addr one :genann_run call)
    (loadreg)
    (6 txt_3addr 0 0 intr0)
    (5 output 0 0 intr0)
    (7 0 0 0 intr0)
    (handle input4_addr output_addr one :genann_run call)
    (loadreg)
    (6 txt_4addr 0 0 intr0)
    (5 output 0 0 intr0)
    (7 0 0 0 intr0)
    (handle :genann_free call)
    (loadreg)
	(:free_genanns call)
	(loadreg)
    (1 zero 0 0 intr0)
    (255 zero 0 0 intr0)
(funcend)
// genann library
// neural networks
//
(genann_init_lib func)
    (set string 17 modulestr@genann "libl1vmgenann.so")
    (set string 16 readstr@genann "genann_read_ann")
    (set string 18 writestr@genann "genann_write_ann")
    (set string 16 initstr@genann "genann_init_ann")
    (set string 17 trainstr@genann "genann_train_ann")
    (set string 15 runstr@genann "genann_run_ann")
    (set string 16 freestr@genann "genann_free_ann")
	(set string s freegenannsstr@genann "free_mem")
	(set string s genanninitstr@genann "genann_init_state")
	(set string s alloc_err_str@genann "genann: ERROR allocating memory for genanns!")
    (set int64 1 read@genann 0)
    (set int64 1 write@genann 1)
    (set int64 1 init@genann 2)
    (set int64 1 train@genann 3)
    (set int64 1 run@genann 4)
    (set int64 1 free@genann 5)
	(set int64 1 freegenanns@genann 6)
	(set int64 1 genanninit@genann 7)
    (set int64 1 mod@genann 0)
	(set int64 1 maxind@genann 0)
	(set int64 1 ret@genann 0)
	(set int64 1 f@genann 0)
    // get arguments from stack
	(maxind@genann stpopi)
    (mod@genann stpopi)
    // load genann module
    (0 modulestr@genannaddr mod@genann 0 intr0)
    // set functions
    (2 mod@genann read@genann readstr@genannaddr intr0)
    (2 mod@genann write@genann writestr@genannaddr intr0)
    (2 mod@genann init@genann initstr@genannaddr intr0)
    (2 mod@genann train@genann trainstr@genannaddr intr0)
    (2 mod@genann run@genann runstr@genannaddr intr0)
    (2 mod@genann free@genann freestr@genannaddr intr0)
	(2 mod@genann freegenanns@genann freegenannsstr@genannaddr intr0)
	(2 mod@genann genanninit@genann genanninitstr@genannaddr intr0)
	// call init genann function
	(maxind@genann stpushi)
	(3 mod@genann genanninit@genann 0 intr0)
	(ret@genann stpopi)
	(loadreg)
	(((ret@genann zero !=) f@genann =) f@genann if)
		(6 alloc_err_str@genann 0 0 intr0)
		(7 0 0 0 intr0)
	(endif)
	(ret stpushi)
(funcend)
// wrapper functions
(genann_read func)
    (3 mod@genann read@genann 0 intr0)
(funcend)
(genann_write func)
    (3 mod@genann write@genann 0 intr0)
(funcend)
(genann_init func)
    (3 mod@genann init@genann 0 intr0)
(funcend)
(genann_train func)
    (3 mod@genann train@genann 0 intr0)
(funcend)
(genann_run func)
    (3 mod@genann run@genann 0 intr0)
(funcend)
(genann_free func)
    (3 mod@genann free@genann 0 intr0)
(funcend)
(free_genanns func)
	(3 mod@genann freegenanns@genann 0 intr0)
(funcend)
