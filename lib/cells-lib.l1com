// Cells FANN wrapper library for L1VM
//
//
(main func)
	(set int64 1 zero 0)
	(set int64 1 one 1)
	(set int64 1 ret 0)
	(set int64 1 max_cells 1)
	(set int64 1 cell 0)
	(set int64 1 node_xor 0)
	(set int64 1 inputs 2)
	(set int64 1 outputs 1)
	(set int64 1 max_layers 1)
	(set int64 1 cell_neurons 3)
	(set double 2 node_xor_inputsf 1.0 0.0)
	(set double 1 node_xor_outputsf 0.0)
	// following data addresses taken from assembly output!
	(set int64 1 node_xor_inputsfaddr 80)
	(set int64 1 node_xor_outputsfaddr 96)
	(set double 1 outputf 0.0)
	(set int64 1 outputfaddr 120)
	(set int64 1 layer_zero 0)
	(set int64 1 layer_one 1)
	(set int64 1 ret 0)
	(set double 1 zerof 0.0)
	(set double 1 onef 1.0)
	(set int64 1 offset 8)
	(set int64 1 max_layer_readout 0)
	// following data address taken from assembly output!
	(set int64 1 max_layer_readout_addr 184)
	// set path to "xor_float.net" file of Cells C library:
	(set string s node_xor_filestr "/home/stefan/l1vm/fann/xor_float.net")
	(zero max_cells :cells_init_lib call)
	(loadreg)
	// allocate memory for cell neurons
	(max_cells cell_neurons :cells_alloc_neurons_equal call)
	(ret stpopi)
	(loadreg)
	// read FANN from file
	(cell node_xor node_xor_filestraddr inputs outputs node_xor_inputsfaddr node_xor_outputsfaddr layer_zero one :cells_fann_read_ann call)
	(ret stpopi)
	(loadreg)
	(cell node_xor :cells_fann_run_ann call)
	(ret stpopi)
	(loadreg)
	(cell node_xor zero outputfaddr :cells_fann_get_output call)
	(ret stpopi)
	(loadreg)
	(5 outputf 0 0 intr0)
	(7 0 0 0 intr0)
	// update ANN 
	(zerof node_xor_inputsf [ zero ] =)
	(zerof node_xor_inputsf [ offset ] =)
	(cell node_xor inputs node_xor_inputsfaddr :cells_fann_do_update_ann call)
	(ret stpopi)
	(loadreg)
	(cell node_xor :cells_fann_run_ann call)
	(ret stpopi)
	(loadreg)
	(cell node_xor zero outputfaddr :cells_fann_get_output call)
	(ret stpopi)
	(loadreg)
	(5 outputf 0 0 intr0)
	(7 0 0 0 intr0)
	(zero zero max_layer_readout_addr :cells_fann_get_max_layer call)
	(ret stpopi)
	(loadreg)
	(4 max_layer_readout 0 0 intr0)
	(7 0 0 0 intr0)
	// dealloc neurons
	(max_cells :cells_dealloc_neurons call)
	(ret stpopi)
	(loadreg)
	(:cells_dealloc call)
	(loadreg)
	(255 ret 0 0 intr0)
(funcend)
// Cells library
// neural networks using Cells FANN library
//
(cells_init_lib func)
	(set string s modulestr@cells "libl1vmcells.so")
	(set string s alloc_neurons_equalstr@cells "cells_alloc_neurons_equal")
	(set string s alloc_neuronsstr@cells "cells_alloc_neurons")
	(set string s dealloc_neuronsstr@cells "cells_dealloc_neurons")
	(set string s fann_do_update_annstr@cells "cells_fann_do_update_ann")
	(set string s fann_read_annstr@cells "cells_fann_read_ann")
	(set string s fann_run_annstr@cells "cells_fann_run_ann")
	(set string s fann_get_ouputstr@cells "cells_fann_get_output")
	(set string s alloc_node_linksstr@cells "cells_alloc_node_links")
	(set string s set_node_linkstr@cells "cells_set_node_link")
	(set string s fann_get_max_layerstr@cells "cells_fann_get_max_layer")
	(set string s fann_get_max_nodesstr@cells "cells_fann_get_max_nodes")
	(set string s fann_run_ann_go_linksstr@cells "cells_fann_run_ann_go_links")
	(set string s cells_allocstr@cells "cells_alloc")
	(set string s cells_deallocstr@cells "cells_dealloc")
	(set string s cells_fann_save_cellsstr@cells "cells_fann_save_cells")
	(set string s cells_fann_load_cellsstr@cells "cells_fann_load_cells")
	(set int64 1 alloc_neurons_equal@cells 0)
	(set int64 1 alloc_neurons@cells 1)
	(set int64 1 dealloc_neurons@cells 2)
	(set int64 1 fann_do_update_ann@cells 3)
	(set int64 1 fann_read_ann@cells 4)
	(set int64 1 fann_run_ann@cells 5)
	(set int64 1 fann_get_output@cells 6)
	(set int64 1 alloc_node_links@cells 7)
	(set int64 1 set_node_link@cells 8)
	(set int64 1 fann_get_max_layer@cells 9)
	(set int64 1 fann_get_max_nodes@cells 10)
	(set int64 1 fann_run_ann_go_links@cells 11)
	(set int64 1 cells_alloc@cells 12)
	(set int64 1 cells_dealloc@cells 13)
	(set int64 1 cells_fann_save_cells@cells 14)
	(set int64 1 cells_fann_load_cells@cells 15)
	(set int64 1 mod@cells 0)
	(set int64 1 ret@cells 0)
	(set int64 1 cells_num@cells)
	(set int64 1 f@cells 0)
	(set string s alloc_err_str "Cells: ERROR allocating memory for Cells!")
	// get arguments from stack
	(cells_num@cells stpopi)
    (mod@cells stpopi)
    // load fann module
    (0 modulestr@cellsaddr mod@cells 0 intr0)
	// set functions
	(2 mod@cells alloc_neurons_equal@cells alloc_neurons_equalstr@cells intr0)
	(2 mod@cells alloc_neurons@cells alloc_neuronsstr@cells intr0)
	(2 mod@cells dealloc_neurons@cells dealloc_neuronsstr@cells intr0)
	(2 mod@cells fann_do_update_ann@cells fann_do_update_annstr@cells intr0)
	(2 mod@cells fann_read_ann@cells fann_read_annstr@cells intr0)
	(2 mod@cells fann_run_ann@cells fann_run_annstr@cells intr0)
	(2 mod@cells fann_get_output@cells fann_get_ouputstr@cells intr0)
	(2 mod@cells alloc_node_links@cells alloc_node_linksstr@cells intr0)
	(2 mod@cells set_node_link@cells set_node_linkstr@cells intr0)
	(2 mod@cells fann_get_max_layer@cells fann_get_max_layerstr@cells intr0)
	(2 mod@cells fann_get_max_nodes@cells fann_get_max_nodesstr@cells intr0)
	(2 mod@cells fann_run_ann_go_links@cells fann_run_ann_go_linksstr@cells intr0)
	(2 mod@cells cells_alloc@cells cells_allocstr@cells intr0)
	(2 mod@cells cells_dealloc@cells cells_deallocstr@cells intr0)
	(2 mod@cells cells_fann_save_cells@cells cells_fann_save_cellsstr@cells intr0)
	(2 mod@cells cells_fann_load_cells@cells cells_fann_load_cellsstr@cells intr0)
	// call init cells alloc function
	(cells_num@cells stpushi)
	(3 mod@cells cells_alloc@cells 0 intr0)
	(ret@cells stpopi)
	(loadreg)
	(((ret@cells zero !=) f@cells =) f@cells if)
		(6 alloc_err_str 0 0 intr0)
		(7 0 0 0 intr0)
	(endif)
(funcend)
// wrapper functions
(cells_alloc_neurons_equal func)
	(3 mod@cells alloc_neurons_equal@cells 0 intr0)
(funcend)
(cells_alloc_neurons func)
	(3 mod@cells alloc_neurons@cells 0 intr0)
(funcend)
(cells_dealloc_neurons func)
	(3 mod@cells dealloc_neurons@cells 0 intr0)
(funcend)
(cells_fann_do_update_ann func)
	(3 mod@cells fann_do_update_ann@cells 0 intr0)
(funcend)
(cells_fann_read_ann func)
	(3 mod@cells fann_read_ann@cells 0 intr0)
(funcend)
(cells_fann_run_ann func)
	(3 mod@cells fann_run_ann@cells 0 intr0)
(funcend)
(cells_fann_get_output func)
	(3 mod@cells fann_get_output@cells 0 intr0)
(funcend)
(cells_alloc_node_links func)
	(3 mod@cells alloc_node_links@cells 0 intr0)
(funcend)
(cells_set_node_link func)
	(3 mod@cells set_node_link@cells 0 intr0)
(funcend)
(cells_fann_get_max_layer func)
	(3 mod@cells fann_get_max_layer@cells 0 intr0)
(funcend)
(cells_fann_get_max_nodes func)
	(3 mod@cells fann_get_max_nodes@cells 0 intr0)
(funcend)
(cells_fann_run_ann_go_links func)
	(3 mod@cells fann_run_ann_go_links@cells 0 intr0)
(funcend)
(cells_dealloc func)
	(3 mod@cells cells_dealloc@cells 0 intr0)
(funcend)
(cells_fann_save_cells func)
	(3 mod@cells cells_fann_save_cells@cells 0 intr0)
(funcend)
(cells_fann_load_cells func)
	(3 mod@cells cells_fann_load_cells@cells 0 intr0)
(funcend)
