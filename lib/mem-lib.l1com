(main func)
    (set int64 1 zero 0)
	(set int64 1 one 1)
	(set int64 1 memaddr 0)
	(set int64 1 memsize 10000)
	(set int64 1 i 0)
	(set int64 1 j 0)
	(set int64 1 f 0)
	(set int64 1 read 0)
	(set int64 1 write 0)
	(set int64 1 ret 0)
	(set string s meminitstr "ERROR can't init memory")
	(set string s memerrstr "ERROR can't allocate memory!")
	(set string s writing "writing: ")
	(set string s reading "reading: ")
	(zero one :mem_init call)
	(ret stpopi)
	(loadreg)
	(((ret zero !=) f =) f if)
		// ERROR can't allocate memory
		(6 meminitstr 0 0 intr0)
		(7 0 0 0 intr0)
		(255 one 0 0 intr0)
	(endif)
	// allocate
	(memsize :alloc_int64 call)
	(memaddr stpopi)
	(loadreg)
	(((memaddr zero <) f =) f if)
		// ERROR can't allocate memory
		(6 memerrstr 0 0 intr0)
		(7 0 0 0 intr0)
		(255 one 0 0 intr0)
	(endif)
	// write to array
	(:write_loop)
	(6 writing 0 0 intr0)
	(4 i 0 0 intr0)
	(7 0 0 0 intr0)
	(memaddr i i :int_to_array call)
	(loadreg)
	((i one +) i =)
	(((i memsize <) f =) f if)
		(:write_loop jmp)
	(endif)
	(7 0 0 0 intr0)
	(7 0 0 0 intr0)
	// read from array
	(zero j =)
	(4 j 0 0 intr0)
	(7 0 0 0 intr0)
	(:read_loop)
	(memaddr j :array_to_int call)
	(read stpopi)
	(loadreg)
	(6 reading 0 0 intr0)
	(4 read 0 0 intr0)
	(7 0 0 0 intr0)
	((j one +) j =)
	(((j memsize <) f =) f if)
		(:read_loop jmp)
	(endif)
	// dealloc mem
	(memaddr :dealloc call)
	(loadreg)
	(:free_mem call)
	(loadreg)
	// close mem module
	(1 zero 0 0 intr0)
	// exit OK
	(255 0 0 0 intr0)
(funcend)
// mem library
//
//
(mem_init func)
	(set string s modulestr@mem "libl1vmmem.so")
	(set string s initstr@mem "init_mem")
	(set string s allocbytestr@mem "alloc_byte")
	(set string s allocint16str@mem "alloc_int16")
	(set string s allocint32str@mem "alloc_int32")
	(set string s allocint64str@mem "alloc_int64")
	(set string s allocdoublestr@mem "alloc_double")
	(set string s deallocstr@mem "dealloc_mem")
	(set string s int_to_arraystr@mem "int_to_array")
	(set string s array_to_instr@mod "array_to_int")
	(set string s double_to_arraystr@mem "double_to_array")
	(set string s array_to_doublestr@mem "array_to_double")
	(set string s free@memstr "free_mem")
	(set int64 1 init@mem 0)
	(set int64 1 allocbyte@mem 1)
	(set int64 1 allocint16@mem 2)
	(set int64 1 allocint32@mem 3)
	(set int64 1 allocint64@mem 4)
	(set int64 1 allocdouble@mem 5)
	(set int64 1 dealloc@mem 6)
	(set int64 1 int_to_array@mem 7)
	(set int64 1 array_to_int@mem 8)
	(set int64 1 double_to_array@mem 9)
	(set int64 1 array_to_double@mem 10)
	(set int64 1 free@mem 11)
	(set int64 1 mod@mem 0)
	(set int64 1 maxind@mem 0)
	// get arguments from stack
	(maxind@mem stpopi)
	(mod@mem stpopi)
	// load mem module
	(0 modulestr@memaddr mod@mem 0 intr0)
	// set functions
	(2 mod@mem init@mem initstr@memaddr intr0)
	(2 mod@mem allocbyte@mem allocbytestr@memaddr intr0)
	(2 mod@mem allocint16@mem allocint16str@mem intr0)
	(2 mod@mem allocint32@mem allocint32str@memaddr intr0)
	(2 mod@mem allocint64@mem allocint64str@memaddr intr0)
	(2 mod@mem allocdouble@mem allocdoublestr@memaddr intr0)
	(2 mod@mem dealloc@mem deallocstr@memaddr intr0)
	(2 mod@mem int_to_array@mem int_to_arraystr@memaddr intr0)
	(2 mod@mem array_to_int@mem array_to_instr@modaddr intr0)
	(2 mod@mem double_to_array@mem double_to_arraystr@memaddr intr0)
	(2 mod@mem array_to_double@mem array_to_doublestr@memaddr intr0)
	(2 mod@mem free@mem free@memstraddr intr0)
	// init module 
	(maxind@mem stpushi)
	(3 mod@mem init@mem 0 intr0)
	// return value back to caller
(funcend)
// wrapper functions
(alloc_byte func)
	(3 mod@mem allocbyte@mem 0 intr0)
(funcend)
(alloc_int16 func)
	(3 mod@mem allocint16@mem 0 intr0)
(funcend)
(alloc_int32 func)
	(3 mod@mem allocint32@mem 0 intr0)
(funcend)
(alloc_int64 func)
	(3 mod@mem allocint64@mem 0 intr0)
(funcend)
(alloc_double func)
	(3 mod@mem allocdouble@mem 0 intr0)
(funcend)
(dealloc func)
	(3 mod@mem dealloc@mem 0 intr0)
(funcend)
(int_to_array func)
	(3 mod@mem int_to_array@mem 0 intr0)
(funcend)
(array_to_int func)
	(3 mod@mem array_to_int@mem 0 intr0)
(funcend)
(double_to_array func)
	(3 mod@mem double_to_array@mem 0 intr0)
(funcend)
(array_to_double func)
	(3 mod@mem array_to_double@mem 0 intr0)
(funcend)
(free_mem func)
	(3 mod@mem free@mem 0 intr0)
(funcend)
