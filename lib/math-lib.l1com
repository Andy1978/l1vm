(main func)
	(set int64 1 zero 0)
	(set int64 1 randstart 2003)
	(set int64 1 random 0)
	(set int64 1 digits 3)
	(set int64 1 numstr_len 30)
	(set int64 1 not_num 0)
	(set int64 1 not_ret)
	(set string 30 numstr "")
	// set constants -----------------------------------------
	(set const-double 1 m_e@math 2.7182818284590452354)
	(set const-double 1 m_log2e@math 1.4426950408889634074)
	(set const-double 1 m_log10e@math 0.43429448190325182765)
	(set const-double 1 m_ln2@math 0.69314718055994530942)
	(set const-double 1 m_ln1@math 2.30258509299404568402)
	(set const-double 1 m_pi@math 3.14159265358979323846)
	(set const-double 1 m_pi_2@math 1.57079632679489661923)
	(set const-double 1 m_pi_4@math 0.78539816339744830962)
	(set const-double 1 m_1_pi@math 0.31830988618379067154)
	(set const-double 1 m_2_pi@math 0.63661977236758134308)
	(set const-double 1 m_2_sqrtpi@math 1.12837916709551257390)
	(set const-double 1 m_sqrt2@math 1.41421356237309504880)
	(set const-double 1 m_sqrt1_2@math 0.70710678118654752440)
	// -------------------------------------------------------
	(zero :math_init call)
	(loadreg)
	(randstart :math_randinit call)
	(loadreg)
	(:math_randint call)
	(random stpopi)
	(loadreg)
	(4 random 0 0 intr0)
	(7 0 0 0 intr0)
	(5 m_pi@math 0 0 intr0)
	(7 0 0 0 intr0)
	// round pi to "digits" (3) digits and store number in string
	(m_pi@math digits numstraddr numstr_len :double_rounded_string call)
	(loadreg)
	(6 numstr 0 0 intr0)
	(7 0 0 0 intr0)
	(not_num :math_not call)
	(not_ret stpopi)
	(loadreg)
	(4 not_ret 0 0 intr0)
	(7 0 0 0 intr0)
	// close module
	(1 zero 0 0 intr0)
	(255 zero 0 0 intr0)
(funcend)
#include <math-lib.l1h>
