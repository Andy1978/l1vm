(main func)
    (set int64 1 zero 0)
    (set int64 1 one 1)
    (set int64 1 two 2)
    (set int64 1 three 3)
    (set int64 1 width 1280Q)
    (set int64 1 height 900Q)
    (set int64 1 rand_init 2018)
    (set int64 1 bit 32)
    (set int64 1 ret 0)
    (set int64 1 x1 350)
    (set int64 1 y1 300)
    (set int64 1 x2 0)
    (set int64 1 y2 0)
    (set byte 1 col 0)
    (set int64 1 maxcol 255)
    (set byte 1 maxcol_b 255)
    (set double 1 maxcol_d 255.0)
    (set int64 1 loops 0)
    (set int64 1 loopsmax 1000)
    (set int64 1 delay 20000)
    (set int64 1 delay_rect 500)
    (set int64 1 f 0)
    // colors
    (set byte 1 r 255)
    (set byte 1 g 255)
    (set byte 1 b 255)
    (set int64 1 f 0)
    (set int64 1 delay 20000)
    (set string s fontname "/home/stefan/l1vm-0.9.5/fonts/Vera.ttf")
    (set string s welcome "Rectangles, a demo by Stefan Pietzonke aka koder77.")
    (set int64 1 fontsize 20)
    (set int64 1 delay_welcome 8000)
    // open screen
    (zero width height bit :sdl_open_screen call)
    (ret stpopb)
    (loadreg)
    (one :math_init call)
    (loadreg)
    // load font
    (fontnameaddr fontsize :sdl_font_ttf call)
    (loadreg)
    // show welcome text
    (x1 y1 r g b welcome :sdl_text_ttf call)
    (loadreg)
    (:sdl_update call)
    (loadreg)
    (8 delay_welcome 0 0 intr0)
    // draw gfx
    (rand_init :math_randinit call)
    (loadreg)
    (:loop)
    // first edge
    (width :math_randintmax call)
    (x1 stpopi)
    (loadreg)
    (height :math_randintmax call)
    (y1 stpopi)
    (loadreg)
    // second edge
    (width :math_randintmax call)
    (x2 stpopi)
    (loadreg)
    (height :math_randintmax call)
    (y2 stpopi)
    (loadreg)
// colors
    (maxcol :math_randintmax call)
    (r stpopi)
    (loadreg)
    (maxcol :math_randintmax call)
    (g stpopi)
    (loadreg)
    (maxcol :math_randintmax call)
    (b stpopi)
    (loadreg)
// draw colored box
    (x1 y1 x2 y2 r g b maxcol_b :sdl_rectangle_fill call)
    (loadreg)
    (:sdl_update call)
    (loadreg)
    (8 delay_rect 0 0 intr0)
    ((loops one +) loops =)
    ((loops loopsmax <) f =)
    (f if)
    (:loop jmp)
    (endif)
    // wait
    (8 delay 0 0 intr0)
    (:sdl_quit jsr)
    // close math module
    (1 one 0 0 intr0)
    // close sdl module
    (1 zero 0 0 intr0)
    // quit
    (255 0 0 0 intr0)
(funcend)
// SDL library
//
//
(sdl_open_screen func)
    (set int64 1 zero 0)
    (set string 14 modulestr@sdl "libl1vmsdl.so")
    (set string 16 openstr@sdl "sdl_open_screen")
    (set string 9 quitstr@sdl "sdl_quit")
    (set string 16 pixelstr@sdl "sdl_pixel_alpha")
    (set string 15 linestr@sdl "sdl_line_alpha")
    (set string 20 rectanglestr@sdl "sdl_rectangle_alpha")
    (set string 25 rectangle_fillstr@sdl "sdl_rectangle_fill_alpha")
    (set string 17 circlestr@sdl "sdl_circle_alpha")
    (set string 22 circle_fillstr@sdl "sdl_circle_fill_alpha")
    (set string 18 ellipsestr@sdl "sdl_ellipse_alpha")
    (set string 23 ellipse_fillstr@sdl "sdl_ellipse_fill_alpha")
    (set string 14 piestr@sdl "sdl_pie_alpha")
    (set string 19 pie_fillstr@sdl "sdl_pie_fill_alpha")
    (set string 17 trigonstr@sdl "sdl_trigon_alpha")
    (set string 22 trigon_fillstr@sdl "sdl_trigon_fill_alpha")
    (set string 13 font_ttfstr@sdl "sdl_font_ttf")
    (set string 13 text_ttfstr@sdl "sdl_text_ttf")
    (set string 19 get_pixelcolorstr@sdl "sdl_get_pixelcolor")
    (set string 11 updatestr@sdl "sdl_update")
    (set int64 1 open@sdl 0)
    (set int64 1 quit@sdl 1)
    (set int64 1 update@sdl 2)
    (set int64 1 pixel@sdl 3)
    (set int64 1 line@sdl 4)
    (set int64 1 rectangle@sdl 5)
    (set int64 1 rectangle_fill@sdl 6)
    (set int64 1 circle@sdl 7)
    (set int64 1 circle_fill@sdl 8)
    (set int64 1 ellipse@sdl 9)
    (set int64 1 ellipse_fill@sdl 10)
    (set int64 1 pie@sdl 11)
    (set int64 1 pie_fill@sdl 12)
    (set int64 1 trigon@sdl 13)
    (set int64 1 trigon_fill@sdl 14)
    (set int64 1 font_ttf@sdl 15)
    (set int64 1 text_ttf@sdl 16)
    (set int64 1 get_pixelcolor@sdl 17)
    (set int64 1 get@sdl 0)
    // call arguments
    (set int64 1 width@sdl 0)
    (set int64 1 height@sdl 0)
    (set int64 1 bit@sdl 0)
    (set int64 1 mod@sdl 0)
    // get arguments from stack
    (bit@sdl stpopi)
    (height@sdl stpopi)
    (width@sdl stpopi)
    (mod@sdl stpopi)
    // load sdl module
    (0 modulestr@sdladdr mod@sdl 0 intr0)
    // set functions
    (2 mod@sdl open@sdl openstr@sdladdr intr0)
    (2 mod@sdl quit@sdl quitstr@sdladdr intr0)
    (2 mod@sdl pixel@sdl pixelstr@sdladdr intr0)
    (2 mod@sdl line@sdl linestr@sdladdr intr0)
    (2 mod@sdl rectangle@sdl rectanglestr@sdladdr intr0)
    (2 mod@sdl rectangle_fill@sdl rectangle_fillstr@sdladdr intr0)
    (2 mod@sdl circle@sdl circlestr@sdladdr intr0)
    (2 mod@sdl circle_fill@sdl circle_fillstr@sdladdr intr0)
    (2 mod@sdl ellipse@sdl ellipsestr@sdladdr intr0)
    (2 mod@sdl ellipse_fill@sdl ellipse_fillstr@sdladdr intr0)
    (2 mod@sdl pie@sdl piestr@sdladdr intr0)
    (2 mod@sdl pie_fill@sdl pie_fillstr@sdladdr intr0)
    (2 mod@sdl trigon@sdl trigonstr@sdladdr intr0)
    (2 mod@sdl trigon_fill@sdl trigon_fillstr@sdladdr intr0)
    (2 mod@sdl update@sdl updatestr@sdladdr intr0)
    (2 mod@sdl font_ttf@sdl font_ttfstr@sdladdr intr0)
    (2 mod@sdl text_ttf@sdl text_ttfstr@sdladdr intr0)
    (2 mod@sdl get_pixelcolor@sdl get_pixelcolorstr@sdladdr intr0)
    // open screen
    (width@sdl stpushi)
    (height@sdl stpushi)
    (bit@sdl stpushb)
    (3 mod@sdl open@sdl 0 intr0)
(funcend)
(sdl_font_ttf func)
    // arguments on stack: fontname (zero terminated), size
    (3 mod@sdl font_ttf@sdl 0 intr0)
(funcend)
(sdl_text_ttf func)
    // arguments on stack: x, y, r, g, b, text (zero terminated)
    (3 mod@sdl text_ttf@sdl 0 intr0)
(funcend)
(sdl_pixel func)
    // arguments on stack: x, y, r, g, b, alpha
    // call sdl module function
    (3 mod@sdl pixel@sdl 0 intr0)
(funcend)
(sdl_line func)
    // arguments: x1, y1, x2, y2, r, g, b, alpha
    (3 mod@sdl line@sdl 0 intr0)
(funcend)
(sdl_rectangle func)
    // arguments: x1, y1, x2, y2, r, g, b, alpha
    (3 mod@sdl rectangle@sdl 0 intr0)
(funcend)
(sdl_rectangle_fill func)
    // arguments: x1, y1, x2, y2, r, g, b, alpha
    (3 mod@sdl rectangle_fill@sdl 0 intr0)
(funcend)
(sdl_circle func)
    // arguments: x, y, radius, r, g, b, alpha
    (3 mod@sdl circle@sdl 0 intr0)
(funcend)
(sdl_circle_fill func)
    // arguments: x, y, radius, r, g, b, alpha
    (3 mod@sdl circle_fill@sdl 0 intr0)
(funcend)
(sdl_ellipse func)
    // arguments: x, y, xradius, yradius, r, g, b, alpha
    (3 mod@sdl ellipse@sdl 0 intr0)
(funcend)
(sdl_ellipse_fill func)
    // arguments: x, y, xradius, yradius, r, g, b, alpha
    (3 mod@sdl ellipse_fill@sdl 0 intr0)
(funcend)
(sdl_pie func)
    // arguments: x, y, radius, startangle, endangle, r, g, b, alpha
    (3 mod@sdl pie@sdl 0 intr0)
(funcend)
(sdl_pie_fill func)
    // arguments: x, y, radius, startangle, endangle, r, g, b, alpha
    (3 mod@sdl pie_fill@sdl 0 intr0)
(funcend)
(sdl_trigon func)
    // arguments: x1, y1, x2, y2, x3, y3, r, g, b, alpha
    (3 mod@sdl trigon@sdl 0 intr0)
(funcend)
(sdl_trigon_fill func)
    // arguments: x1, y1, x2, y2, x3, y3, r, g, b, alpha
    (3 mod@sdl trigon_fill@sdl 0 intr0)
(funcend)
(sdl_get_pixelcolor func)
    // arguments: x, y
    // return: r, g, b
    (3 mod@sdl get_pixelcolor@sdl 0 intr0)
(funcend)
(sdl_update func)
    (3 mod@sdl update@sdl 0 intr0)
(funcend)
(sdl_quit func)
    (3 mod@sdl quit@sdl 0 intr0)
(funcend)
// math library
//
//
(math_init func)
    (set string 15 modulestr@math "libl1vmmath.so")
    (set string 12 int2doublestr@math "int2double")
    (set string 12 double2intstr@math "double2int")
    (set string 12 sqrtdoublestr@math "sqrtdouble")
    (set string 10 logdoublestr@math "logdouble")
    (set string 11 log2doublestr@math "log2double")
    (set string 10 randinitstr@math "rand_init")
    (set string 9 randintstr@math "rand_int")
    (set string 12 randdoublestr@math "rand_double")
    (set string 13 randintmaxstr@math "rand_int_max")
    (set int64 1 int2double@math 0)
    (set int64 1 double2int@math 1)
    (set int64 1 sqrtdouble@math 2)
    (set int64 1 logdouble@math 3)
    (set int64 1 log2double@math 4)
    (set int64 1 randinit@math 5)
    (set int64 1 randint@math 6)
    (set int64 1 randdouble@math 7)
    (set int64 1 randintmax@math 8)
    (set int64 1 mod@math 0)
    // get argument from stack
    (mod@math stpopi)
    // load math module
    (0 modulestr@mathaddr mod@math 0 intr0)
    // set functions
    (2 mod@math int2double@math int2doublestr@mathaddr intr0)
    (2 mod@math double2int@math double2intstr@mathaddr intr0)
    (2 mod@math sqrtdouble@math sqrtdoublestr@mathaddr intr0)
    (2 mod@math logdouble@math logdoublestr@mathaddr intr0)
    (2 mod@math log2double@math log2doublestr@mathaddr intr0)
    (2 mod@math randinit@math randinitstr@mathaddr intr0)
    (2 mod@math randint@math randintstr@mathaddr intr0)
    (2 mod@math randdouble@math randdoublestr@mathaddr intr0)
    (2 mod@math randintmax@math randintmaxstr@mathaddr intr0)
(funcend)
// wrapper functions
(math_int2double func)
    (3 mod@math int2double@math 0 intr0)
(funcend)
(math_double2int func)
    (3 mod@math double2int@math 0 intr0)
(funcend)
(math_sqrtdouble func)
    (3 mod@math sqrtdouble@math 0 intr0)
(funcend)
(math_logdouble func)
    (3 mod@math logdouble@math 0 intr0)
(funcend)
(math_log2double func)
    (3 mod@math log2double@math 0 intr0)
(funcend)
(math_randinit func)
    (3 mod@math randinit@math 0 intr0)
(funcend)
(math_randint func)
    (3 mod@math randint@math 0 intr0)
(funcend)
(math_randdouble func)
    (3 mod@math randdouble@math 0 intr0)
(funcend)
(math_randintmax func)
    (3 mod@math randintmax@math 0 intr0)
(funcend)
