(main func)
    (set int64 1 zero 0)
    (set int64 1 one 1)
    (set int64 1 two 2)
    (set int64 1 three 3)
    (set int64 1 width 1280Q)
    (set int64 1 height 900Q)
    (set int64 1 bit 32)
    (set int64 1 ret 0)
    (set int64 1 x 0)
    (set int64 1 y 0)
    (set byte 1 col 0)
    (set byte 1 maxcol 255)
    (set int64 1 f 0)
    (set int64 1 delay 20000)
    // open screeen
    (zero width height bit :sdl_open_screen call)
    (ret stpopb)
    (loadreg)
    // draw gfx
    (zero x =)
    (:xloop)
    (zero y =)
    (:yloop)
    (x y col col col maxcol :sdl_pixel call)
    (loadreg)
    ((col one +) col =)
    ((col maxcol >) f =)
    (f :reset_color jmpi)
    (:next_y jmp)
    (:reset_color)
    (zero col =)
    (:next_y)
    ((y one +) y =)
    ((y height <) f =)
    (f :yloop jmpi)
    ((x one +) x =)
    ((x width <) f =)
    (f :xloop jmpi)
    // call sdl update
    (:sdl_update call)
    (loadreg)
    // wait
    (8 delay 0 0 intr0)
    (:sdl_quit jsr)
    // close sdl module
    (1 zero 0 0 intr0)
    // quit
    (255 0 0 0 intr0)
(funcend)
// SDL library
//
//
(sdl_open_screen func)
    (set int64 1 zero 0)
    (set string 14 sdlmodulestr@sdl "libl1vmsdl.so")
    (set string 16 sdlopenstr@sdl "sdl_open_screen")
    (set string 9 sdlquitstr@sdl "sdl_quit")
    (set string 16 sdlpixelstr@sdl "sdl_pixel_alpha")
    (set string 11 sdlupdatestr@sdl "sdl_update")
    (set int64 1 open@sdl 0)
    (set int64 1 quit@sdl 1)
    (set int64 1 update@sdl 2)
    (set int64 1 pixel@sdl 3)
    (set int64 1 get@sdl 0)
    // call arguments
    (set int64 1 width@sdl 0)
    (set int64 1 height@sdl 0)
    (set int64 1 bit@sdl 0)
    (set int64 1 mod@sdl 0)
    // get arguments from stack
    (bit@sdl stpopi)
    (height@sdl stpopi)
    (width@sdl stpopi)
    (mod@sdl stpopi)
    // load sdl module
    (0 sdlmodulestr@sdladdr mod@sdl 0 intr0)
    // set functions
    (2 mod@sdl open@sdl sdlopenstr@sdladdr intr0)
    (2 mod@sdl quit@sdl sdlquitstr@sdladdr intr0)
    (2 mod@sdl pixel@sdl sdlpixelstr@sdladdr intr0)
    (2 mod@sdl update@sdl sdlupdatestr@sdladdr intr0)
    // open screeen
    (width@sdl stpushi)
    (height@sdl stpushi)
    (bit@sdl stpushb)
    (3 mod@sdl open@sdl 0 intr0)
(funcend)
(sdl_pixel func)
    // arguments on stack: x, y, r, g, b, alpha
    // call sdl module function
    (3 mod@sdl pixel@sdl 0 intr0)
(funcend)
(sdl_update func)
    (3 mod@sdl update@sdl 0 intr0)
(funcend)
(sdl_quit func)
    (3 mod@sdl quit@sdl 0 intr0)
(funcend)
