(main func)
    (set int64 1 zero 0)
    (set int64 1 one 1)
    (set int64 1 two 2)
    (set int64 1 three 3)
    (set int64 1 width 1280Q)
    (set int64 1 height 900Q)
    (set int64 1 bit 32)
    (set int64 1 ret 0)
    (set int64 1 x 0)
    (set int64 1 y 0)
    (set byte 1 col 0)
    (set byte 1 maxcol 255)
    (set int64 1 f 0)
    (set int64 1 delay 20000)
    // open screen
    (zero width height bit :sdl_open_screen call)
    (ret stpopi)
    (loadreg)
    // draw gfx
    (zero x =)
    (:xloop)
    (zero y =)
    (:yloop)
    (x y col col col maxcol :sdl_pixel call)
    (loadreg)
    ((col one +) col =)
    ((col maxcol >) f =)
    (f :reset_color jmpi)
    (:next_y jmp)
    (:reset_color)
    (zero col =)
    (:next_y)
    ((y one +) y =)
    ((y height <) f =)
    (f :yloop jmpi)
    ((x one +) x =)
    ((x width <) f =)
    (f :xloop jmpi)
    // call sdl update
    (:sdl_update call)
    (loadreg)
    // wait
    (8 delay 0 0 intr0)
    (:sdl_quit jsr)
    // close sdl module
    (1 zero 0 0 intr0)
    // quit
    (255 0 0 0 intr0)
(funcend)
// SDL library
//
//
(sdl_open_screen func)
    (set int64 1 zero 0)
    (set string 14 modulestr@sdl "libl1vmsdl.so")
    (set string 16 openstr@sdl "sdl_open_screen")
    (set string 9 quitstr@sdl "sdl_quit")
    (set string 16 pixelstr@sdl "sdl_pixel_alpha")
    (set string 15 linestr@sdl "sdl_line_alpha")
    (set string 20 rectanglestr@sdl "sdl_rectangle_alpha")
    (set string 25 rectangle_fillstr@sdl "sdl_rectangle_fill_alpha")
    (set string 17 circlestr@sdl "sdl_circle_alpha")
    (set string 22 circle_fillstr@sdl "sdl_circle_fill_alpha")
    (set string 18 ellipsestr@sdl "sdl_ellipse_alpha")
    (set string 23 ellipse_fillstr@sdl "sdl_ellipse_fill_alpha")
    (set string 14 piestr@sdl "sdl_pie_alpha")
    (set string 19 pie_fillstr@sdl "sdl_pie_fill_alpha")
    (set string 17 trigonstr@sdl "sdl_trigon_alpha")
    (set string 22 trigon_fillstr@sdl "sdl_trigon_fill_alpha")
    (set string 11 updatestr@sdl "sdl_update")
    (set int64 1 open@sdl 0)
    (set int64 1 quit@sdl 1)
    (set int64 1 update@sdl 2)
    (set int64 1 pixel@sdl 3)
    (set int64 1 line@sdl 4)
    (set int64 1 rectangle@sdl 5)
    (set int64 1 rectangle_fill@sdl 6)
    (set int64 1 circle@sdl 7)
    (set int64 1 circle_fill@sdl 8)
    (set int64 1 ellipse@sdl 9)
    (set int64 1 ellipse_fill@sdl 10)
    (set int64 1 pie@sdl 11)
    (set int64 1 pie_fill@sdl 12)
    (set int64 1 trigon@sdl 13)
    (set int64 1 trigon_fill@sdl 14)
    (set int64 1 get@sdl 0)
    // call arguments
    (set int64 1 width@sdl 0)
    (set int64 1 height@sdl 0)
    (set int64 1 bit@sdl 0)
    (set int64 1 mod@sdl 0)
    // get arguments from stack
    (bit@sdl stpopi)
    (height@sdl stpopi)
    (width@sdl stpopi)
    (mod@sdl stpopi)
    // load sdl module
    (0 modulestr@sdladdr mod@sdl 0 intr0)
    // set functions
    (2 mod@sdl open@sdl openstr@sdladdr intr0)
    (2 mod@sdl quit@sdl quitstr@sdladdr intr0)
    (2 mod@sdl pixel@sdl pixelstr@sdladdr intr0)
    (2 mod@sdl line@sdl linestr@sdladdr intr0)
    (2 mod@sdl rectangle@sdl rectanglestr@sdladdr intr0)
    (2 mod@sdl rectangle_fill@sdl rectangle_fillstr@sdladdr intr0)
    (2 mod@sdl circle@sdl circlestr@sdladdr intr0)
    (2 mod@sdl circle_fill@sdl circle_fillstr@sdladdr intr0)
    (2 mod@sdl ellipse@sdl ellipsestr@sdladdr intr0)
    (2 mod@sdl ellipse_fill@sdl ellipse_fillstr@sdladdr intr0)
    (2 mod@sdl pie@sdl piestr@sdladdr intr0)
    (2 mod@sdl pie_fill@sdl pie_fillstr@sdladdr intr0)
    (2 mod@sdl trigon@sdl trigonstr@sdladdr intr0)
    (2 mod@sdl trigon_fill@sdl trigon_fillstr@sdladdr intr0)
    (2 mod@sdl update@sdl updatestr@sdladdr intr0)
    // open screen
    (width@sdl stpushi)
    (height@sdl stpushi)
    (bit@sdl stpushi)
    (3 mod@sdl open@sdl 0 intr0)
(funcend)
(sdl_pixel func)
    // arguments on stack: x, y, r, g, b, alpha
    // call sdl module function
    (3 mod@sdl pixel@sdl 0 intr0)
(funcend)
(sdl_line func)
    // arguments: x1, y1, x2, y2, r, g, b, alpha
    (3 mod@sdl line@sdl 0 intr0)
(funcend)
(sdl_rectangle func)
    // arguments: x1, y1, x2, y2, r, g, b, alpha
    (3 mod@sdl rectangle@sdl 0 intr0)
(funcend)
(sdl_rectangle_fill func)
    // arguments: x1, y1, x2, y2, r, g, b, alpha
    (3 mod@sdl rectangle_fill@sdl 0 intr0)
(funcend)
(sdl_circle func)
    // arguments: x, y, radius, r, g, b, alpha
    (3 mod@sdl circle@sdl 0 intr0)
(funcend)
(sdl_circle_fill func)
    // arguments: x, y, radius, r, g, b, alpha
    (3 mod@sdl circle_fill@sdl 0 intr0)
(funcend)
(sdl_ellipse func)
    // arguments: x, y, xradius, yradius, r, g, b, alpha
    (3 mod@sdl ellipse@sdl 0 intr0)
(funcend)
(sdl_ellipse_fill func)
    // arguments: x, y, xradius, yradius, r, g, b, alpha
    (3 mod@sdl ellipse_fill@sdl 0 intr0)
(funcend)
(sdl_pie func)
    // arguments: x, y, radius, startangle, endangle, r, g, b, alpha
    (3 mod@sdl pie@sdl 0 intr0)
(funcend)
(sdl_pie_fill func)
    // arguments: x, y, radius, startangle, endangle, r, g, b, alpha
    (3 mod@sdl pie_fill@sdl 0 intr0)
(funcend)
(sdl_trigon func)
    // arguments: x1, y1, x2, y2, x3, y3, r, g, b, alpha
    (3 mod@sdl trigon@sdl 0 intr0)
(funcend)
(sdl_trigon_fill func)
    // arguments: x1, y1, x2, y2, x3, y3, r, g, b, alpha
    (3 mod@sdl trigon_fill@sdl 0 intr0)
(funcend)
(sdl_update func)
    (3 mod@sdl update@sdl 0 intr0)
(funcend)
(sdl_quit func)
    (3 mod@sdl quit@sdl 0 intr0)
(funcend)
