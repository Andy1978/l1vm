// primes.l1com - Sieve of Eratosthenes
// primenum search
//
(main func)
	(set int64 1 zero 0)
	(set int64 1 one 1)
	(set int64 1 two 2)
	(set int64 1 i 2)
	(set int64 1 j 0)
	(set int64 1 z 1)
	(set int64 1 f 0)
	(set int64 1 a 0)
	(set int64 1 k 0)
	(set byte 1000000 primes)
	(set int64 1 limit 1000000)
	// init primes array
	//
	(:init_primes)
	(((i limit <) f =) f if)
		(one primes [ i ] =)
		((i one +) i =)
		(:init_primes jmp)
	(endif)
	// search primes
	//
	(two i =)
	(:search_primes)
	(((i limit <) f =) f if)
		(primes [ i ] a =)
		(((a one ==) f =) f if)
			(i j =)
			(:search)
			((i j *) k =)
			(((k limit <) f =) f if)
				(zero primes [ k ] =)
				((j one +) j =)
				(:search jmp)
			(endif)
		(endif)
		((i one +) i =)
		(:search_primes jmp)
	(endif)
	// print primes
	//
	(two i =)
	(:print_primes)
	(((i limit <) f =) f if)
		(primes [ i ] a =)
		(((a one ==) f =) f if)
			(4 i 0 0 intr0)
			(7 0 0 0 intr0)
		(endif)
		((i one +) i =)
		(:print_primes jmp)
	(endif)
	(255 0 0 0 intr0)
	(funcend)
