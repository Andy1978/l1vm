(main func)
    (set int64 1 zero 0)
    (set int32 1 x 23)
    (set int32 1 y 42)
    (set int32 1 a 0)
	(set int32 1 b 0)
	(set int32 1 c 0)
	(set int32 1 d 0)
	(x y :addd call)
	(a stpopi)
	(loadreg)
	(x y :subd call)
	(b stpopi)
	(loadreg)
	(x y :muld call)
	(c stpopi)
	(loadreg)
	(x y :divd call)
	(d stpopi)
	(loadreg)
    (23 a 0 0 intr0)
	(7 0 0 0 intr0)
	(23 b 0 0 intr0)
	(7 0 0 0 intr0)
	(23 c 0 0 intr0)
	(7 0 0 0 intr0)
	(23 d 0 0 intr0)
	(7 0 0 0 intr0)
	(255 0 0 0 intr0)
(funcend)
(addd func)
	(set int32 1 x@addd)
	(set int32 1 y@addd)
	(set int32 1 ret@addd)
	(y@addd stpopi)
	(x@addd stpopi)
	((x@addd y@addd +) ret@addd =)
	(ret@addd stpushi)
(funcend)
(subd func)
	(set int32 1 x@subd)
	(set int32 1 y@subd)
	(set int32 1 ret@subd)
	(y@subd stpopi)
	(x@subd stpopi)
	((x@subd y@subd -) ret@subd =)
	(ret@subd stpushi)
(funcend)
(muld func)
	(set int32 1 x@muld)
	(set int32 1 y@muld)
	(set int32 1 ret@muld)
	(y@muld stpopi)
	(x@muld stpopi)
	((x@muld y@muld *) ret@muld =)
	(ret@muld stpushi)
(funcend)
(divd func)
	(set int32 1 x@divd)
	(set int32 1 y@divd)
	(set int32 1 ret@divd)
	(y@divd stpopi)
	(x@divd stpopi)
	((x@divd y@divd /) ret@divd =)
	(ret@divd stpushi)
(funcend)
