(main func)
    (set int64 1 zero 0)
	(set int64 1 one 1)
	(set int64 1 two 2)
	(set int64 1 three 3)
    (set double 1 diam 0.0)
	(set double 1 circ 0.0)
	(set double 1 zerod 0.0)
	(set int64 1 math_choice 0)
	(set string s menu_diamstr "1: calculate diameter of circle")
	(set string s menu_circstr "2: calculate circumference of circle")
	(set string s menu_quitstr "3: quit")
	(set string s menu_chstr "? ")
	(set string s diamstr "diameter: ")
	(set string s circstr "circumference: ")
	(set int64 1 input 0)
	(set int64 1 f 0)
	// set constants -----------------------------------------
	(set double 1 m_e@math 2.7182818284590452354)
	(set double 1 m_log2e@math 1.4426950408889634074)
	(set double 1 m_log10e@math 0.43429448190325182765)
	(set double 1 m_ln2@math 0.69314718055994530942)
	(set double 1 m_ln1@math 2.30258509299404568402)
	(set double 1 m_pi@math 3.14159265358979323846)
	(set double 1 m_pi_2@math 1.57079632679489661923)
	(set double 1 m_pi_4@math 0.78539816339744830962)
	(set double 1 m_1_pi@math 0.31830988618379067154)
	(set double 1 m_2_pi@math 0.63661977236758134308)
	(set double 1 m_2_sqrtpi@math 1.12837916709551257390)
	(set double 1 m_sqrt2@math 1.41421356237309504880)
	(set double 1 m_sqrt1_2@math 0.70710678118654752440)
	// -------------------------------------------------------
    (zero :math_init call)
    (loadreg)
	(:loop)
	(6 menu_diamstr 0 0 intr0)
	(7 0 0 0 intr0)
	(6 menu_circstr 0 0 intr0)
	(7 0 0 0 intr0)
	(6 menu_quitstr 0 0 intr0)
	(7 0 0 0 intr0)
	(6 menu_chstr 0 0 intr0)
	// read input
	(9 input 0 0 intr0)
	(((input three ==) f =) f if)
		// quit
		(255 0 0 0 intr0)
	(endif)
	(((input one ==) f =) f if)
		(zerod circ =)
		(6 circstr 0 0 intr0)
		(10 circ 0 0 intr0)
		((circ m_pi@math /d) diam =)
		(6 diamstr 0 0 intr0)
		(5 diam 0 0 intr0)
		(7 0 0 0 intr0)
		(7 0 0 0 intr0)
	(endif)
	(((input two ==) f =) f if)
		(zerod diam =)
		(6 diamstr 0 0 intr0)
		(10 diam 0 0 intr0)
		((diam m_pi@math *d) circ =)
		(6 circstr 0 0 intr0)
		(5 circ 0 0 intr0)
		(7 0 0 0 intr0)
		(7 0 0 0 intr0)
	(endif)
	(:loop jmp)
(funcend)
// math library
//
//
(math_init func)
    (set string 15 modulestr@math "libl1vmmath.so")
    (set string 12 int2doublestr@math "int2double")
    (set string 12 double2intstr@math "double2int")
    (set string 12 sqrtdoublestr@math "sqrtdouble")
    (set string 10 logdoublestr@math "logdouble")
    (set string 11 log2doublestr@math "log2double")
    (set string 10 randinitstr@math "rand_init")
    (set string 9 randintstr@math "rand_int")
    (set string 12 randdoublestr@math "rand_double")
    (set string 13 randintmaxstr@math "rand_int_max")
	(set string 22 doubleroundedstringstr@math "double_rounded_string")
	(set string s stringtointstr@math "string_to_int")
	(set string s stringtodoublestr@math "string_to_double")
    (set int64 1 int2double@math 0)
    (set int64 1 double2int@math 1)
    (set int64 1 sqrtdouble@math 2)
    (set int64 1 logdouble@math 3)
    (set int64 1 log2double@math 4)
    (set int64 1 randinit@math 5)
    (set int64 1 randint@math 6)
    (set int64 1 randdouble@math 7)
    (set int64 1 randintmax@math 8)
	(set int64 1 doubleroundedstring@math 9)
	(set int64 1 stringtoint@math 10)
	(set int64 1 stringtodouble@math 11)
    (set int64 1 mod@math 0)
    // get argument from stack
    (mod@math stpopi)
    // load math module
    (0 modulestr@mathaddr mod@math 0 intr0)
    // set functions
    (2 mod@math int2double@math int2doublestr@mathaddr intr0)
    (2 mod@math double2int@math double2intstr@mathaddr intr0)
    (2 mod@math sqrtdouble@math sqrtdoublestr@mathaddr intr0)
    (2 mod@math logdouble@math logdoublestr@mathaddr intr0)
    (2 mod@math log2double@math log2doublestr@mathaddr intr0)
    (2 mod@math randinit@math randinitstr@mathaddr intr0)
    (2 mod@math randint@math randintstr@mathaddr intr0)
    (2 mod@math randdouble@math randdoublestr@mathaddr intr0)
    (2 mod@math randintmax@math randintmaxstr@mathaddr intr0)
	(2 mod@math doubleroundedstring@math doubleroundedstringstr@mathaddr intr0)
	(2 mod@math stringtoint@math stringtointstr@mathaddr intr0)
	(2 mod@math stringtodouble@math stringtodoublestr@mathaddr intr0)
(funcend)
// wrapper functions
(math_int2double func)
    (3 mod@math int2double@math 0 intr0)
(funcend)
(math_double2int func)
    (3 mod@math double2int@math 0 intr0)
(funcend)
(math_sqrtdouble func)
    (3 mod@math sqrtdouble@math 0 intr0)
(funcend)
(math_logdouble func)
    (3 mod@math logdouble@math 0 intr0)
(funcend)
(math_log2double func)
    (3 mod@math log2double@math 0 intr0)
(funcend)
(math_randinit func)
    (3 mod@math randinit@math 0 intr0)
(funcend)
(math_randint func)
    (3 mod@math randint@math 0 intr0)
(funcend)
(math_randdouble func)
    (3 mod@math randdouble@math 0 intr0)
(funcend)
(math_randintmax func)
    (3 mod@math randintmax@math 0 intr0)
(funcend)
(double_rounded_string func)
	(3 mod@math doubleroundedstring@math 0 intr0)
(funcend)
(string_to_int func)
	(3 mod@math stringtoint@math 0 intr0)
(funcend)
(string_to_double func)
	(3 mod@math stringtodouble@math 0 intr0)
(funcend)
