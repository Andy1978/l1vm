// math-circle.l1com
// calculate diameter or circumference of circle
//
(main func)
	(set int64 1 zero 0)
	(set int64 1 one 1)
	(set int64 1 two 2)
	(set int64 1 three 3)
	(set double 1 diam 0.0)
	(set double 1 circ 0.0)
	(set double 1 zerod 0.0)
	(set string s menu_diamstr "1: calculate diameter of circle")
	(set string s menu_circstr "2: calculate circumference of circle")
	(set string s menu_quitstr "3: quit")
	(set string s menu_chstr "? ")
	(set string s diamstr "diameter:      ")
	(set string s circstr "circumference: ")
	(set int64 1 input 0)
	(set int64 1 f 0)
	// set constant -----------------------------------------
	(set double 1 m_pi@math 3.14159265358979323846)
	// -------------------------------------------------------
	(:loop)
	(6 menu_diamstr 0 0 intr0)
	(7 0 0 0 intr0)
	(6 menu_circstr 0 0 intr0)
	(7 0 0 0 intr0)
	(6 menu_quitstr 0 0 intr0)
	(7 0 0 0 intr0)
	(6 menu_chstr 0 0 intr0)
	// read input
	(9 input 0 0 intr0)
	(((input three ==) f =) f if)
		// quit
		(255 0 0 0 intr0)
	(endif)
	(((input one ==) f =) f if+)
		(reset-reg)
		(:calc_diam call)
		(loadreg)
	(else)
		(reset-reg)
		(:calc_circ call)
		(loadreg)
	(endif)
	(:loop jmp)
(funcend)
(calc_diam func)
	// calculate diameter
	(zerod circ =)
	(zerod diam =)
	(6 circstr 0 0 intr0)
	// input double circ
	(10 circ 0 0 intr0)
	((circ m_pi@math /d) diam =)
	(6 diamstr 0 0 intr0)
	(5 diam 0 0 intr0)
	(7 0 0 0 intr0)
	(7 0 0 0 intr0)
(funcend)
(calc_circ func)
	// calculate circumference
	(zerod diam =)
	(zerod circ =)
	(6 diamstr 0 0 intr0)
	// input double diam
	(10 diam 0 0 intr0)
	((diam m_pi@math *d) circ =)
	(6 circstr 0 0 intr0)
	(5 circ 0 0 intr0)
	(7 0 0 0 intr0)
	(7 0 0 0 intr0)
(funcend)
