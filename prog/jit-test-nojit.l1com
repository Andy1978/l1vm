(main func)
    (set int64 1 zero 0)
    (set int64 1 x 23)
    (set int64 1 y 42)
    (set int64 1 z 7)
    (set int64 1 i 1)
    // (set int64 1 max 80000000Q)
    (set int64 1 max 800000000Q)
    (set int64 1 sum 0)
    (set int64 1 logic)
    (set int64 1 one 1)
    (ASM)
    loada zero, 0, I0
    loada x, 0, I1
    loada y, 0, I2
    loada z, 0, I3
    loada i, 0, I4
    loada max, 0, I5
    loada one, 0, I6
    loada sum, 0, I10
:loop
    muli I4, I3, I20
    muli I4, I1, I21
    addi I4, I2, I22
    addi I10, I20, I10
    addi I10, I20, I10
    addi I10, I20, I10
    addi I10, I20, I10
    addi I10, I20, I10
    addi I10, I21, I10
    addi I10, I21, I10
    addi I10, I21, I10
    addi I10, I21, I10
    addi I10, I21, I10
    addi I10, I22, I10
    addi I10, I22, I10
    addi I10, I22, I10
    addi I10, I22, I10
    addi I10, I22, I10
    bandi I1, I2, I52
    bori I1, I2, I53
    bxori I1, I2, I54
    // store
	// intr0 4, I10, 0, 0
	// intr0 7, 0, 0, 0
    load sum, 0, I30
    pullqw I10, I30, 0
    addi I4, I6, I4
    lseqi I4, I5, I30
    jmpi I30, :loop
    intr0 4, I10, 0, 0
    intr0 7, 0, 0, 0
    intr0 4, I52, 0, 0
    intr0 7, 0, 0, 0
    intr0 4, I53, 0, 0
    intr0 7, 0, 0, 0
    intr0 4, I54, 0, 0
    intr0 7, 0, 0, 0
    intr0 255, 0, 0, 0
    (ASM_END)
(funcend)
