// turmite in bra(ets
// gfx demo
//
(main func)
    (set int64 1 zero 0)
    (set int64 1 one 1)
    (set int64 1 two 2)
    (set int64 1 width 320)
    (set int64 1 height 240)
    (set int64 1 bit 32)
    (set int64 1 sdl_mod 0)
    (set int64 1 startx 0)
    (set int64 1 starty 0)
    (set int64 1 x 0)
    (set int64 1 y 0)
    (set int64 1 color_ind 0)
    (set int64 1 phase_ind 0)
    (set int64 1 color_r 0)
    (set int64 1 color_g 0)
    (set int64 1 color_b 0)
    (set int64 1 phase_ind)
    (set int64 1 r 0)
    (set int64 1 g 0)
    (set int64 1 b 0)
    (set int64 1 next_r 0)
    (set int64 1 next_g 0)
    (set int64 1 next_b 0)
    (set int64 1 phase_color 0)
    (set int64 1 write_color 0)
    (set int64 1 next_direction 0)
    (set int64 1 next_phase 0)
    (set int64 1 i 0)
    (set int64 1 j 0)
    (set int64 1 f 0)
    (set int64 1 c 0)
    // directions
    (set int64 1 left 1)
    (set int64 1 up 2)
    (set int64 1 right 3)
    (set int64 1 down 4)
    (set int64 1 go_left 3)
    (set int64 1 go_right 1)
    (set int64 1 go_forward 0)
    (set int64 1 go_back 2)
    // colors
    (set int64 1 black 0)
    (set int64 1 red 1)
    (set int64 1 orange 2)
    (set int64 1 yellow 3)
    (set int64 1 green 4)
    (set int64 1 bluegreen 5)
    (set int64 1 blue 6)
    (set int64 1 violet 7)
    (set int64 1 halt 255)
    // color array
    (set int64 1 color_address 392)
    (set int64 1 color_offset 1)
    (set int64 1 color_max 24)
    // colors
    (set byte 24 color 0 0 0 255 0 0 255 200 0 255 255 0 0 255 0 0 255 255 0 0 255 255 0 255)
    // phases
    // phase 0
    (set int64 1 phase0_address 440)
    (set int64 1 phase0_offset 8)
    (set int64 1 phase0_max 256)
    (set int64 32 phase0 green blue go_right 1 black red go_forward 1 blue green go_forward 1 red yellow go_back 0 yellow black go_back 0 orange bluegreen go_left 1 bluegreen violet go_right 0 violet orange go_forward 1)
    // phase 1
    (set int64 1 phase1_address 720)
    (set int64 1 phase1_offset 8)
    (set int64 1 phase1_max 256)
    (set int64 32 phase1 green black go_forward 0 black blue go_forward 0 blue black go_back 1 red green go_right 1 yellow red go_forward 0 orange violet go_back 0 bluegreen orange go_left 0 violet bluegreen go_back 0)
    (set int64 1 phase 0)
    (set int64 1 direction 0)
    (set int64 1 delay 10000)
    (set int64 1 f 0)
    (set int64 1 maxcolorind 8)
    ((width two /) startx =)
    ((startx one -) startx =)
    ((height two /) starty =)
    ((starty one -) starty =)
    (down direction =)
    (sdl_mod width height bit :sdl_open_screen call)
    (loadreg)
    (:clear_screen call)
    (loadreg)
    (startx x =)
    (starty y =)
    (:draw)
    (x y :sdl_get_pixelcolor call)
    (r stpopi)
    (g stpopi)
    (b stpopi)
    (loadreg)
    (zero color_ind =)
    (:get_color_ind)
    (color_ind :get_turmite_color call)
    (color_b stpopi)
    (color_g stpopi)
    (color_r stpopi)
    (loadreg)
    (((r color_r) !=) f)
    (f :get_color_ind_next jmpi)
    (((g color_g) !=) f)
    (f :get_color_ind_next jmpi)
    (((b color_b) !=) f)
    (f :get_color_ind_next jmpi)
    (jmp color_ind_found)
    (:get_color_ind_next)
    ((color_ind one +) color_ind =)
    ((color_ind maxcolorind <=) f)
    (f :get_colorind jmpi)
    (:color_ind_found)
    (zero phase_ind =)


    (8 delay 0 0 intr0)
    (4 startx 0 0 intr0)
    (7 0 0 0 intr0)
    (:sdl_quit call)
    (loadreg)
    // close sdl module
    (1 sdl_mod 0 0 intr0)
    // quit
    (255 0 0 0 intr0)
(funcend)
(get_turmite_color func)
    (set int64 1 r@get_turmite_color 0)
    (set int64 1 g@get_turmite_color 0)
    (set int64 1 b@get_turmite_color 0)
    (set int64 1 ind@get_turmite_color 0)
    (set int64 1 offset@get_turmite_color 3)
    (ind@get_turmite_color stpopi)
    (ASM)
    loada color_address, 0, I1
    loada color_max, 0, I2
    loada offset@get_turmite_color, 0, I11
    loada color_offset, 0, I12
    loada ind@get_turmite_color, 0, I20
    load r@get_turmite_color, 0, I30
    load g@get_turmite_color, 0, I31
    load b@get_turmite_color, 0, I32
    muli I20, I11, I3
    pushb I1, I3, I10
    stpushi I10
    addi I3, I12, I3
    pushb I1, I3, I10
    stpushi I10
    addi I3, I12, I3
    pushb I1, I3, I10
    stpushi I10
    // on stack: b, g, r
    (ASM_END)
(funcend)
(get_phase0 func)
    (set int64 1 data 0)
    // (set int64 1 phase0_address 440)
    // (set int64 1 phase0_offset 8)
    // (set int64 1 phase0_max 256)


(clear_screen func)
    (set byte 1 zero@clear_screen 0)
    (set int64 1 one@clear_screen 1)
    (set byte 1 b@clear_screen 255)
    (set int64 1 x@clear_screen 0)
    (set int64 1 y@clear_screen 0)
    ((width one -) x@clear_screen =)
    ((height one -) y@clear_screen =)
    (zero@clear_screen zero@clear_screen x@clear_screen y@clear_screen zero@clear_screen zero@clear_screen b@clear_screen b@clear_screen :sdl_rectangle_fill call)
    (loadreg)
    (:sdl_update call)
    (loadreg)
(funcend)
// SDL library
//
//
(sdl_open_screen func)
    (set string 14 modulestr@sdl "libl1vmsdl.so")
    (set string 16 openstr@sdl "sdl_open_screen")
    (set string 9 quitstr@sdl "sdl_quit")
    (set string 16 pixelstr@sdl "sdl_pixel_alpha")
    (set string 15 linestr@sdl "sdl_line_alpha")
    (set string 20 rectanglestr@sdl "sdl_rectangle_alpha")
    (set string 25 rectangle_fillstr@sdl "sdl_rectangle_fill_alpha")
    (set string 17 circlestr@sdl "sdl_circle_alpha")
    (set string 22 circle_fillstr@sdl "sdl_circle_fill_alpha")
    (set string 18 ellipsestr@sdl "sdl_ellipse_alpha")
    (set string 23 ellipse_fillstr@sdl "sdl_ellipse_fill_alpha")
    (set string 14 piestr@sdl "sdl_pie_alpha")
    (set string 19 pie_fillstr@sdl "sdl_pie_fill_alpha")
    (set string 17 trigonstr@sdl "sdl_trigon_alpha")
    (set string 22 trigon_fillstr@sdl "sdl_trigon_fill_alpha")
    (set string 13 font_ttfstr@sdl "sdl_font_ttf")
    (set string 13 text_ttfstr@sdl "sdl_text_ttf")
    (set string 19 get_pixelcolorstr@sdl "sdl_get_pixelcolor")
    (set string 11 updatestr@sdl "sdl_update")
    (set int64 1 open@sdl 0)
    (set int64 1 quit@sdl 1)
    (set int64 1 update@sdl 2)
    (set int64 1 pixel@sdl 3)
    (set int64 1 line@sdl 4)
    (set int64 1 rectangle@sdl 5)
    (set int64 1 rectangle_fill@sdl 6)
    (set int64 1 circle@sdl 7)
    (set int64 1 circle_fill@sdl 8)
    (set int64 1 ellipse@sdl 9)
    (set int64 1 ellipse_fill@sdl 10)
    (set int64 1 pie@sdl 11)
    (set int64 1 pie_fill@sdl 12)
    (set int64 1 trigon@sdl 13)
    (set int64 1 trigon_fill@sdl 14)
    (set int64 1 font_ttf@sdl 15)
    (set int64 1 text_ttf@sdl 16)
    (set int64 1 get_pixelcolor@sdl 17)
    (set int64 1 get@sdl 0)
    // call arguments
    (set int64 1 width@sdl 0)
    (set int64 1 height@sdl 0)
    (set int64 1 bit@sdl 0)
    (set int64 1 mod@sdl 0)
    // get arguments from stack
    (bit@sdl stpopi)
    (height@sdl stpopi)
    (width@sdl stpopi)
    (mod@sdl stpopi)
    // load sdl module
    (0 modulestr@sdladdr mod@sdl 0 intr0)
    // set functions
    (2 mod@sdl open@sdl openstr@sdladdr intr0)
    (2 mod@sdl quit@sdl quitstr@sdladdr intr0)
    (2 mod@sdl pixel@sdl pixelstr@sdladdr intr0)
    (2 mod@sdl line@sdl linestr@sdladdr intr0)
    (2 mod@sdl rectangle@sdl rectanglestr@sdladdr intr0)
    (2 mod@sdl rectangle_fill@sdl rectangle_fillstr@sdladdr intr0)
    (2 mod@sdl circle@sdl circlestr@sdladdr intr0)
    (2 mod@sdl circle_fill@sdl circle_fillstr@sdladdr intr0)
    (2 mod@sdl ellipse@sdl ellipsestr@sdladdr intr0)
    (2 mod@sdl ellipse_fill@sdl ellipse_fillstr@sdladdr intr0)
    (2 mod@sdl pie@sdl piestr@sdladdr intr0)
    (2 mod@sdl pie_fill@sdl pie_fillstr@sdladdr intr0)
    (2 mod@sdl trigon@sdl trigonstr@sdladdr intr0)
    (2 mod@sdl trigon_fill@sdl trigon_fillstr@sdladdr intr0)
    (2 mod@sdl update@sdl updatestr@sdladdr intr0)
    (2 mod@sdl font_ttf@sdl font_ttfstr@sdladdr intr0)
    (2 mod@sdl text_ttf@sdl text_ttfstr@sdladdr intr0)
    (2 mod@sdl get_pixelcolor@sdl get_pixelcolorstr@sdladdr intr0)
    // open screen
    (width@sdl stpushi)
    (height@sdl stpushi)
    (bit@sdl stpushb)
    (3 mod@sdl open@sdl 0 intr0)
(funcend)
(sdl_font_ttf func)
    // arguments on stack: fontname (zero terminated), size
    (3 mod@sdl font_ttf@sdl 0 intr0)
(funcend)
(sdl_text_ttf func)
    // arguments on stack: x, y, r, g, b, text (zero terminated)
    (3 mod@sdl text_ttf@sdl 0 intr0)
(funcend)
(sdl_pixel func)
    // arguments on stack: x, y, r, g, b, alpha
    // call sdl module function
    (3 mod@sdl pixel@sdl 0 intr0)
(funcend)
(sdl_line func)
    // arguments: x1, y1, x2, y2, r, g, b, alpha
    (3 mod@sdl line@sdl 0 intr0)
(funcend)
(sdl_rectangle func)
    // arguments: x1, y1, x2, y2, r, g, b, alpha
    (3 mod@sdl rectangle@sdl 0 intr0)
(funcend)
(sdl_rectangle_fill func)
    // arguments: x1, y1, x2, y2, r, g, b, alpha
    (3 mod@sdl rectangle_fill@sdl 0 intr0)
(funcend)
(sdl_circle func)
    // arguments: x, y, radius, r, g, b, alpha
    (3 mod@sdl circle@sdl 0 intr0)
(funcend)
(sdl_circle_fill func)
    // arguments: x, y, radius, r, g, b, alpha
    (3 mod@sdl circle_fill@sdl 0 intr0)
(funcend)
(sdl_ellipse func)
    // arguments: x, y, xradius, yradius, r, g, b, alpha
    (3 mod@sdl ellipse@sdl 0 intr0)
(funcend)
(sdl_ellipse_fill func)
    // arguments: x, y, xradius, yradius, r, g, b, alpha
    (3 mod@sdl ellipse_fill@sdl 0 intr0)
(funcend)
(sdl_pie func)
    // arguments: x, y, radius, startangle, endangle, r, g, b, alpha
    (3 mod@sdl pie@sdl 0 intr0)
(funcend)
(sdl_pie_fill func)
    // arguments: x, y, radius, startangle, endangle, r, g, b, alpha
    (3 mod@sdl pie_fill@sdl 0 intr0)
(funcend)
(sdl_trigon func)
    // arguments: x1, y1, x2, y2, x3, y3, r, g, b, alpha
    (3 mod@sdl trigon@sdl 0 intr0)
(funcend)
(sdl_trigon_fill func)
    // arguments: x1, y1, x2, y2, x3, y3, r, g, b, alpha
    (3 mod@sdl trigon_fill@sdl 0 intr0)
(funcend)
(sdl_get_pixelcolor func)
    // arguments: x, y
    // return: r, g, b
    (3 mod@sdl get_pixelcolor@sdl 0 intr0)
(funcend)
(sdl_update func)
    (3 mod@sdl update@sdl 0 intr0)
(funcend)
(sdl_quit func)
    (3 mod@sdl quit@sdl 0 intr0)
(funcend)
