// mpfr math library
//
//
(main func)
    (set int64 1 zero 0)
	(set int64 1 xaddr 0)
	(set int64 1 yaddr 1)
	(set int64 1 resaddr 2)
	(set string s xstr "0.0")
	(set string s ystr "42.0")
	(set string s resstr "0.0")
	(set string s formatstr "%.20Ff")
	(set string 256 outstr "")
	(set int64 1 outstr_len 255)
	(set int64 1 one 1)
	(set int64 1 base 10)
	(set int64 1 precision 50)
	(set int64 1 f 0)
	(zero :mp_math_init call)
	(loadreg)
	// set variables
	(xstraddr base xaddr :mp_set_float call)
	(loadreg)
	// set pi
	(precision xaddr :mp_get_pi call)
	(loadreg)
	(ystraddr base yaddr :mp_set_float call)
	(loadreg)
	(resstraddr base resaddr :mp_set_float call)
	(loadreg)
	(xaddr yaddr resaddr :mp_mul_float call)
	(loadreg)
	(resaddr formatstraddr precision :mp_print_float call)
	(loadreg)
	(7 0 0 0 intr0)
	(resaddr outstraddr outstr_len formatstr precision :mp_prints_float call)
	(loadreg)
	(6 outstr 0 0 intr0)
	(7 0 0 0 intr0)
	// check mp_greater call 42.0 > 3.14
	(yaddr xaddr :mp_greater call)
	(f stpopi)
	(loadreg)
	(4 f 0 0 intr0)
	(7 0 0 0 intr0)
	(:mp_cleanup call)
	(loadreg)
	(1 zero 0 0 intr0)
	(255 zero 0 0 intr0)
(funcend)
// mpfr math library
//
//
(mp_math_init func)
    (set string s modulestr@gmp "libl1vmmpfr.so")
	(set string s cleanupstr@gmp "mp_cleanup")
	(set string s setstr@gmp "mp_set_float")
	(set string s addstr@gmp "mp_add_float")
	(set string s substr@gmp "mp_sub_float")
	(set string s mulstr@gmp "mp_mul_float")
	(set string s divstr@gmp "mp_div_float")
	(set string s printstr@gmp "mp_print_float")
	(set string s printsstr@gmp "mp_prints_float")
	(set string s lessstr@gmp "mp_less_float")
	(set string s less_equalstr@gmp "mp_less_equal_float")
	(set string s greaterstr@gmp "mp_greater_float")
	(set string s greater_equalstr@gmp "mp_greater_equal_float")
	(set string s equalstr@gmp "mp_equal_float")
	(set string s not_equalstr@gmp "mp_not_equal_float")
	(set string s get_pistr@gmp "mp_get_pi_float")
	(set string s get_log2str@gmp "mp_get_log2_float")
	(set string s get_eulerstr@gmp "mp_get_euler_float")
	(set string s get_catalanstr@gmp "mp_get_catalan_float")
	(set int64 1 cleanup@gmp 0)
	(set int64 1 set_float@gmp 1)
	(set int64 1 add_float@gmp 2)
	(set int64 1 sub_float@gmp 3)
	(set int64 1 mul_float@gmp 4)
	(set int64 1 div_float@gmp 5)
	(set int64 1 print_float@gmp 6)
	(set int64 1 prints_float@gmp 7)
	(set int64 1 less@gmp 8)
	(set int64 1 less_equal@gmp 9)
	(set int64 1 greater@gmp 10)
	(set int64 1 greater_equal@gmp 11)
	(set int64 1 equal@gmp 12)
	(set int64 1 not_equal@gmp 13)
	(set int64 1 get_pi@gmp 14)
	(set int64 1 get_log2@gmp 15)
	(set int64 1 get_euler@gmp 16)
	(set int64 1 get_catalan@gmp 17)
	(set int64 1 mod@gmp 0)
	// get argument from stack
    (mod@gmp stpopi)
    // load math module
    (0 modulestr@gmpaddr mod@gmp 0 intr0)
	// set functions
	(2 mod@gmp cleanup@gmp cleanupstr@gmpaddr intr0)
	(2 mod@gmp set_float@gmp setstr@gmpaddr intr0)
	(2 mod@gmp add_float@gmp addstr@gmpaddr intr0)
	(2 mod@gmp sub_float@gmp substr@gmpaddr intr0)
	(2 mod@gmp mul_float@gmp mulstr@gmpaddr intr0)
	(2 mod@gmp div_float@gmp divstr@gmpaddr intr0)
	(2 mod@gmp print_float@gmp printstr@gmpaddr intr0)
	(2 mod@gmp prints_float@gmp printsstr@gmpaddr intr0)
	(2 mod@gmp less@gmp lessstr@gmpaddr intr0)
	(2 mod@gmp less_equal@gmp less_equalstr@gmpaddr intr0)
	(2 mod@gmp greater@gmp greaterstr@gmpaddr intr0)
	(2 mod@gmp greater_equal@gmp greater_equalstr@gmpaddr intr0)
	(2 mod@gmp equal@gmp equalstr@gmpaddr intr0)
	(2 mod@gmp not_equal@gmp not_equalstr@gmpaddr intr0)
	(2 mod@gmp get_pi@gmp get_pistr@gmpaddr intr0)
	(2 mod@gmp get_log2@gmp get_log2str@gmpaddr intr0)
	(2 mod@gmp get_euler@gmp get_eulerstr@gmpaddr intr0)
	(2 mod@gmp get_catalan@gmp get_catalanstr@gmpaddr intr0)

	// paste to generated code end: ==============================================
	// wrapper functions
	(mp_cleanup func)
	 	(3 mod@gmp cleanup@gmp 0 intr0)
	(funcend)
	(mp_set_float func)
	 	(3 mod@gmp set_float@gmp 0 intr0)
	(funcend)
	(mp_add_float func)
		(3 mod@gmp add_float@gmp 0 intr0)
	(funcend)
	(mp_sub_float func)
		(3 mod@gmp sub_float@gmp 0 intr0)
	(funcend)
	(mp_mul_float func)
		(3 mod@gmp mul_float@gmp 0 intr0)
	(funcend)
	(mp_div_float func)
		(3 mod@gmp div_float@gmp 0 intr0)
	(funcend)
	(mp_print_float func)
	 	(3 mod@gmp print_float@gmp 0 intr0)
	(funcend)
	(mp_prints_float func)
	 	(3 mod@gmp prints_float@gmp 0 intr0)
	(funcend)
	(mp_less func)
		(3 mod@gmp less@gmp 0 intr0)
	(funcend)
	(mp_less_equal func)
		(3 mod@gmp less_equal@gmp 0 intr0)
	(funcend)
	(mp_greater func)
		(3 mod@gmp greater@gmp 0 intr0)
	(funcend)
	(mp_greater_equal func)
		(3 mod@gmp greater_equal@gmp 0 intr0)
	(funcend)
	(mp_equal func)
		(3 mod@gmp equal@gmp 0 intr0)
	(funcend)
	(mp_not_equal func)
		(3 mod@gmp not_equal@gmp 0 intr0)
	(funcend)
	(mp_get_pi func)
		(3 mod@gmp get_pi@gmp 0 intr0)
	(funcend)
	(mp_get_log2 func)
		(3 mod@gmp get_log2@gmp 0 intr0)
	(funcend)
	(mp_get_euler func)
		(3 mod@gmp get_euler@gmp 0 intr0)
	(funcend)
	(mp_get_catalan func)
		(3 mod@gmp get_catalan@gmp 0 intr0)
	(funcend)
