L1VM README  2018-01-05
=======================

YES! I AM BACK! ;)

L1VM is a very tiny virtual machine with RISC (or comparable style) CPU, about 60 opcodes and less than
32 KB binary size on X86_64!
The VM has a 64 bit core (256 registers for integer and double float) and can run object code
written in the l1asm assembly language.

Code and data are in separated memories for a secure execution. Like in Harvard type CPUs (found now in DSPs or microcontrollers).
The opcode set with 60 opcodes is my own opinion how things should work. It does not "copy" other instruction sets known in
other "real" CPUs. It is a "cleanroom" reboot of a CPU.

Why I am back? I did read the news and I was shocked what happened to the real CPUs out there:
Intel, AMD and also ARM are fighting with bigger security breaks. You may already heard about it...

I think what we really need would be a "press the reboot button" and design a new hardware CPU with security in mind this time...

The design goals are:
- be small
- be fast
- be simple
- be modular

L1VM ist under active development. As a proof of concept I rewrote the Nano VM fractalix SDL graphics demo in L1VM
assembly.

I try to write a compiler for a higher level language. This is not a simple task, but maybe
it is worth the time invested...

I included a few demo programs.

The source code is released under the GPL.


Modules
=======
The VM modules should be installed into "/usr/local/lib".


NOTE
====
The current version of L1VM only runs on a Linux or other POSIX compatible OS!
If you want help to port it to a new OS, then contact me please...


TODO
====
- make the L1COM compiler a bit more comfortable
- write more functions for the modules
- more demo programs


USAGE
=====

compile
-------

$ l1com test

compiles program "test.l1com"

assemble
--------

$ l1asm test

assembles program "test.l1asm" generated by the compiler

run
---

$ l1vm test

finally executes program "test.l1obj"

==========================================================================

for Rebecca
